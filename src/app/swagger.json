{
    "openapi": "3.0.0",
    "info": {
        "title": "Zeus API",
        "description": "API for managing clients, members, projects, equipment, and penalties in the Zeus system",
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:4001",
            "description": "Local development server"
        }
    ],
    "tags": [
        { "name": "Auth", "description": "Authentication and user management" },
        { "name": "Client", "description": "Client operations" },
        { "name": "Member", "description": "Member operations" },
        { "name": "Project", "description": "Project management" },
        { "name": "Equipment", "description": "Equipment management" },
        { "name": "Penalty", "description": "Penalty system" },
        { "name": "System", "description": "System health and documentation" }
    ],
    "paths": {
        "/auth/login": {
            "post": {
                "tags": ["Auth"],
                "summary": "User login",
                "description": "Authenticate a user and return a JWT token",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": { "type": "string", "format": "email", "example": "admin@compjunior.com.br" },
                                    "password": { "type": "string", "example": "123456" }
                                },
                                "required": ["email", "password"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "token": { "type": "string", "description": "JWT token for authentication" }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized - Invalid credentials" }
                }
            }
        },
        "/auth/register-client": {
            "post": {
                "tags": ["Auth"],
                "summary": "Register a new client",
                "description": "Create a new client account",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": { "type": "string", "example": "Eu" },
                                    "email": { "type": "string", "format": "email", "example": "dejesusmchadojp@gmail.com" },
                                    "password": { "type": "string", "example": "senhaSgura123" },
                                    "role": { "type": "string", "example": "client" },
                                    "phone": { "type": "string", "example": "(22) 99999-8888" },
                                    "gender": { "type": "string", "example": "F" },
                                    "skills": { "type": "string", "example": "Node, React, angular" },
                                    "data_nascimento": { "type": "string", "format": "date", "example": "1995-05-23" }
                                },
                                "required": ["name", "email", "password", "role"]
                            }
                        }
                    }
                },
                "responses": {
                    "201": { "description": "Client created successfully" },
                    "400": { "description": "Bad request - Invalid input data" }
                }
            }
        },
        "/auth/register": {
            "post": {
                "tags": ["Auth"],
                "summary": "Register a new member",
                "description": "Create a new member account (admin only)",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "nomeCompleto": { "type": "string", "example": "Joao Pedro Oliveira de jesus" },
                                    "email": { "type": "string", "format": "email", "example": "joao.machado@compjunior.com.br" },
                                    "password": { "type": "string", "example": "senhaSegura123" },
                                    "role": { "type": "string", "example": "admin" },
                                    "phone": { "type": "string", "example": "(22) 997678267" },
                                    "gender": { "type": "string", "example": "F" },
                                    "skills": { "type": "string", "example": "Node, React" },
                                    "data_nascimento": { "type": "string", "example": "16/06/2004" }
                                },
                                "required": ["nomeCompleto", "email", "password", "role"]
                            }
                        }
                    }
                },
                "responses": {
                    "201": { "description": "Member created successfully" },
                    "403": { "description": "Forbidden - Only admins can create members" }
                }
            }
        },
        "/auth/forgot-password-client": {
            "post": {
                "tags": ["Auth"],
                "summary": "Request password reset",
                "description": "Send a password reset email to the user",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": { "type": "string", "format": "email", "example": "seu@email.com" }
                                },
                                "required": ["email"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": { "description": "Password reset email sent" },
                    "404": { "description": "User not found" }
                }
            }
        },
        "/auth/reset-password/{token}": {
            "post": {
                "tags": ["Auth"],
                "summary": "Reset password",
                "description": "Reset user password with a valid token",
                "parameters": [
                    {
                        "name": "token",
                        "in": "path",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "password": { "type": "string", "example": "novaSenhaForte123" }
                                },
                                "required": ["password"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": { "description": "Password reset successfully" },
                    "400": { "description": "Invalid or expired token" }
                }
            }
        },
        "/client": {
            "get": {
                "tags": ["Client"],
                "summary": "Get all clients",
                "description": "Retrieve a list of all clients",
                "responses": {
                    "200": {
                        "description": "A list of clients",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/Client" }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Client"],
                "summary": "Create a new client",
                "description": "Create a new client record",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": { "$ref": "#/components/schemas/ClientInput" }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Client created successfully",
                        "content": {
                            "application/json": {
                                "schema": { "$ref": "#/components/schemas/Client" }
                            }
                        }
                    }
                }
            }
        },
        "/client/{client_id}": {
            "get": {
                "tags": ["Client"],
                "summary": "Get client by ID",
                "description": "Retrieve a single client by their ID",
                "parameters": [
                    {
                        "name": "client_id",
                        "in": "path",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Client details",
                        "content": {
                            "application/json": {
                                "schema": { "$ref": "#/components/schemas/Client" }
                            }
                        }
                    },
                    "404": { "description": "Client not found" }
                }
            },
            "put": {
                "tags": ["Client"],
                "summary": "Update client",
                "description": "Update an existing client",
                "parameters": [
                    {
                        "name": "client_id",
                        "in": "path",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": { "$ref": "#/components/schemas/ClientUpdate" }
                        }
                    }
                },
                "responses": {
                    "200": { "description": "Client updated successfully" },
                    "404": { "description": "Client not found" }
                }
            },
            "delete": {
                "tags": ["Client"],
                "summary": "Delete client",
                "description": "Delete a client record",
                "parameters": [
                    {
                        "name": "client_id",
                        "in": "path",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "204": { "description": "Client deleted successfully" },
                    "404": { "description": "Client not found" }
                }
            }
        },
        "/client/upload-photo/{client_id}": {
            "post": {
                "tags": ["Client"],
                "summary": "Upload client photo",
                "description": "Upload a profile photo for a client",
                "parameters": [
                    {
                        "name": "client_id",
                        "in": "path",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "photo": { "type": "string", "format": "binary" }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": { "description": "Photo uploaded successfully" },
                    "400": { "description": "Invalid file or client ID" }
                }
            }
        },
        "/member/{member_id}": {
            "get": {
                "tags": ["Member"],
                "summary": "Get member by ID",
                "description": "Retrieve a single member by their ID",
                "parameters": [
                    {
                        "name": "member_id",
                        "in": "path",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Member details",
                        "content": {
                            "application/json": {
                                "schema": { "$ref": "#/components/schemas/Member" }
                            }
                        }
                    },
                    "404": { "description": "Member not found" }
                }
            },
            "put": {
                "tags": ["Member"],
                "summary": "Update member",
                "description": "Update an existing member",
                "parameters": [
                    {
                        "name": "member_id",
                        "in": "path",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": { "$ref": "#/components/schemas/MemberUpdate" }
                        }
                    }
                },
                "responses": {
                    "200": { "description": "Member updated successfully" },
                    "404": { "description": "Member not found" }
                }
            },
            "delete": {
                "tags": ["Member"],
                "summary": "Delete member",
                "description": "Delete a member record",
                "parameters": [
                    {
                        "name": "member_id",
                        "in": "path",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "204": { "description": "Member deleted successfully" },
                    "404": { "description": "Member not found" }
                }
            }
        },
        "/member/upload-photo/{member_id}": {
            "post": {
                "tags": ["Member"],
                "summary": "Upload member photo",
                "description": "Upload a profile photo for a member (requires authentication)",
                "security": [{ "bearerAuth": [] }],
                "parameters": [
                    {
                        "name": "member_id",
                        "in": "path",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "photo": { "type": "string", "format": "binary" }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": { "description": "Photo uploaded successfully" },
                    "401": { "description": "Unauthorized - Invalid or missing token" },
                    "400": { "description": "Invalid file or member ID" }
                }
            }
        },
        "/project": {
            "get": {
                "tags": ["Project"],
                "summary": "Get all projects",
                "description": "Retrieve a list of all projects (requires authentication)",
                "security": [{ "bearerAuth": [] }],
                "responses": {
                    "200": {
                        "description": "A list of projects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/Project" }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Project"],
                "summary": "Create a new project",
                "description": "Create a new project record",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": { "$ref": "#/components/schemas/ProjectInput" }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Project created successfully",
                        "content": {
                            "application/json": {
                                "schema": { "$ref": "#/components/schemas/Project" }
                            }
                        }
                    }
                }
            }
        },
        "/project/{project_id}": {
            "get": {
                "tags": ["Project"],
                "summary": "Get project by ID",
                "description": "Retrieve a single project by its ID",
                "parameters": [
                    {
                        "name": "project_id",
                        "in": "path",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project details",
                        "content": {
                            "application/json": {
                                "schema": { "$ref": "#/components/schemas/Project" }
                            }
                        }
                    },
                    "404": { "description": "Project not found" }
                }
            },
            "put": {
                "tags": ["Project"],
                "summary": "Update project",
                "description": "Update an existing project",
                "parameters": [
                    {
                        "name": "project_id",
                        "in": "path",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": { "$ref": "#/components/schemas/ProjectUpdate" }
                        }
                    }
                },
                "responses": {
                    "200": { "description": "Project updated successfully" },
                    "404": { "description": "Project not found" }
                }
            },
            "delete": {
                "tags": ["Project"],
                "summary": "Delete project",
                "description": "Delete a project record",
                "parameters": [
                    {
                        "name": "project_id",
                        "in": "path",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "204": { "description": "Project deleted successfully" },
                    "404": { "description": "Project not found" }
                }
            }
        },
        "/equipment": {
            "get": {
                "tags": ["Equipment"],
                "summary": "Get all equipment",
                "description": "Retrieve a list of all equipment",
                "responses": {
                    "200": {
                        "description": "A list of equipment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/Equipment" }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Equipment"],
                "summary": "Create new equipment",
                "description": "Create a new equipment record",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": { "$ref": "#/components/schemas/EquipmentInput" }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Equipment created successfully",
                        "content": {
                            "application/json": {
                                "schema": { "$ref": "#/components/schemas/Equipment" }
                            }
                        }
                    }
                }
            }
        },
        "/equipment/{equipment_id}": {
            "get": {
                "tags": ["Equipment"],
                "summary": "Get equipment by ID",
                "description": "Retrieve a single equipment by its ID",
                "parameters": [
                    {
                        "name": "equipment_id",
                        "in": "path",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Equipment details",
                        "content": {
                            "application/json": {
                                "schema": { "$ref": "#/components/schemas/Equipment" }
                            }
                        }
                    },
                    "404": { "description": "Equipment not found" }
                }
            },
            "put": {
                "tags": ["Equipment"],
                "summary": "Update equipment",
                "description": "Update an existing equipment",
                "parameters": [
                    {
                        "name": "equipment_id",
                        "in": "path",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": { "$ref": "#/components/schemas/EquipmentUpdate" }
                        }
                    }
                },
                "responses": {
                    "200": { "description": "Equipment updated successfully" },
                    "404": { "description": "Equipment not found" }
                }
            },
            "delete": {
                "tags": ["Equipment"],
                "summary": "Delete equipment",
                "description": "Delete an equipment record",
                "parameters": [
                    {
                        "name": "equipment_id",
                        "in": "path",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "204": { "description": "Equipment deleted successfully" },
                    "404": { "description": "Equipment not found" }
                }
            }
        },
        "/penalty": {
            "get": {
                "tags": ["Penalty"],
                "summary": "Get all penalties",
                "description": "Retrieve a list of all penalties",
                "responses": {
                    "200": {
                        "description": "A list of penalties",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/Penalty" }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Penalty"],
                "summary": "Create new penalty",
                "description": "Create a new penalty record",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": { "$ref": "#/components/schemas/PenaltyInput" }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Penalty created successfully",
                        "content": {
                            "application/json": {
                                "schema": { "$ref": "#/components/schemas/Penalty" }
                            }
                        }
                    }
                }
            }
        },
        "/penalty/{penalty_id}": {
            "get": {
                "tags": ["Penalty"],
                "summary": "Get penalty by ID",
                "description": "Retrieve a single penalty by its ID",
                "parameters": [
                    {
                        "name": "penalty_id",
                        "in": "path",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Penalty details",
                        "content": {
                            "application/json": {
                                "schema": { "$ref": "#/components/schemas/Penalty" }
                            }
                        }
                    },
                    "404": { "description": "Penalty not found" }
                }
            },
            "put": {
                "tags": ["Penalty"],
                "summary": "Update penalty",
                "description": "Update an existing penalty",
                "parameters": [
                    {
                        "name": "penalty_id",
                        "in": "path",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": { "$ref": "#/components/schemas/PenaltyUpdate" }
                        }
                    }
                },
                "responses": {
                    "200": { "description": "Penalty updated successfully" },
                    "404": { "description": "Penalty not found" }
                }
            },
            "delete": {
                "tags": ["Penalty"],
                "summary": "Delete penalty",
                "description": "Delete a penalty record",
                "parameters": [
                    {
                        "name": "penalty_id",
                        "in": "path",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "204": { "description": "Penalty deleted successfully" },
                    "404": { "description": "Penalty not found" }
                }
            }
        },
        "/healthcheck": {
            "get": {
                "tags": ["System"],
                "summary": "Health check",
                "description": "Check if the API is running",
                "responses": {
                    "200": {
                        "description": "API is healthy",
                        "content": {
                            "text/plain": {
                                "schema": { "type": "string", "example": "OK" }
                            }
                        }
                    }
                }
            }
        },
        "/api-docs": {
            "get": {
                "tags": ["System"],
                "summary": "API documentation",
                "description": "Get the API documentation in Swagger format",
                "responses": {
                    "200": {
                        "description": "Swagger documentation",
                        "content": {
                            "application/json": {
                                "schema": { "type": "object" }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Client": {
                "type": "object",
                "properties": {
                    "id": { "type": "integer", "example": 1 },
                    "name": { "type": "string", "example": "John Doe" },
                    "email": { "type": "string", "format": "email", "example": "john@example.com" },
                    "phone": { "type": "string", "example": "(22) 99999-8888" },
                    "gender": { "type": "string", "example": "M" },
                    "skills": { "type": "string", "example": "Node, React" },
                    "data_nascimento": { "type": "string", "format": "date", "example": "1995-05-23" },
                    "photo_url": { "type": "string", "example": "/uploads/clients/1.jpg" },
                    "created_at": { "type": "string", "format": "date-time" },
                    "updated_at": { "type": "string", "format": "date-time" }
                }
            },
            "ClientInput": {
                "type": "object",
                "properties": {
                    "name": { "type": "string", "example": "John Doe" },
                    "email": { "type": "string", "format": "email", "example": "john@example.com" },
                    "password": { "type": "string", "example": "securePassword123" },
                    "role": { "type": "string", "example": "client" },
                    "phone": { "type": "string", "example": "(22) 99999-8888" },
                    "gender": { "type": "string", "example": "M" },
                    "skills": { "type": "string", "example": "Node, React" },
                    "data_nascimento": { "type": "string", "format": "date", "example": "1995-05-23" }
                },
                "required": ["name", "email", "password", "role"]
            },
            "ClientUpdate": {
                "type": "object",
                "properties": {
                    "name": { "type": "string", "example": "Updated Name" },
                    "email": { "type": "string", "format": "email", "example": "updated@example.com" },
                    "phone": { "type": "string", "example": "(22) 88888-7777" }
                }
            },
            "Member": {
                "type": "object",
                "properties": {
                    "id": { "type": "integer", "example": 1 },
                    "nomeCompleto": { "type": "string", "example": "Joao Pedro Oliveira de jesus" },
                    "email": { "type": "string", "format": "email", "example": "joao.machado@compjunior.com.br" },
                    "role": { "type": "string", "example": "admin" },
                    "phone": { "type": "string", "example": "(22) 997678267" },
                    "gender": { "type": "string", "example": "F" },
                    "skills": { "type": "string", "example": "Node, React" },
                    "data_nascimento": { "type": "string", "example": "16/06/2004" },
                    "photo_url": { "type": "string", "example": "/uploads/members/1.jpg" },
                    "created_at": { "type": "string", "format": "date-time" },
                    "updated_at": { "type": "string", "format": "date-time" }
                }
            },
            "MemberUpdate": {
                "type": "object",
                "properties": {
                    "nomeCompleto": { "type": "string", "example": "Updated Name" },
                    "email": { "type": "string", "format": "email", "example": "updated@compjunior.com.br" },
                    "role": { "type": "string", "example": "member" }
                }
            },
            "Project": {
                "type": "object",
                "properties": {
                    "id": { "type": "integer", "example": 1 },
                    "name": { "type": "string", "example": "Projeto Teste" },
                    "description": { "type": "string", "example": "Descrição do projeto" },
                    "status": { "type": "string", "example": "active" },
                    "clientId": { "type": "integer", "example": 1 },
                    "memberId": { "type": "integer", "example": 1 },
                    "created_at": { "type": "string", "format": "date-time" },
                    "updated_at": { "type": "string", "format": "date-time" }
                }
            },
            "ProjectInput": {
                "type": "object",
                "properties": {
                    "name": { "type": "string", "example": "Projeto Teste" },
                    "description": { "type": "string", "example": "Descrição do projeto" },
                    "clientId": { "type": "integer", "example": 1 },
                    "memberId": { "type": "integer", "example": 1 }
                },
                "required": ["name", "clientId", "memberId"]
            },
            "ProjectUpdate": {
                "type": "object",
                "properties": {
                    "name": { "type": "string", "example": "Projeto Atualizado" },
                    "description": { "type": "string", "example": "Nova descrição" },
                    "status": { "type": "string", "example": "aprovado" }
                }
            },
            "Equipment": {
                "type": "object",
                "properties": {
                    "id": { "type": "integer", "example": 1 },
                    "name": { "type": "string", "example": "Equipamento Teste" },
                    "description": { "type": "string", "example": "Descrição do equipamento" },
                    "created_at": { "type": "string", "format": "date-time" },
                    "updated_at": { "type": "string", "format": "date-time" }
                }
            },
            "EquipmentInput": {
                "type": "object",
                "properties": {
                    "name": { "type": "string", "example": "Equipamento Teste" },
                    "description": { "type": "string", "example": "Descrição do equipamento" }
                },
                "required": ["name"]
            },
            "EquipmentUpdate": {
                "type": "object",
                "properties": {
                    "name": { "type": "string", "example": "Equipamento Atualizado" },
                    "description": { "type": "string", "example": "Nova descrição" }
                }
            },
            "Penalty": {
                "type": "object",
                "properties": {
                    "id": { "type": "integer", "example": 1 },
                    "type": { "type": "string", "example": "warning" },
                    "reason": { "type": "string", "example": "Atraso" },
                    "date": { "type": "string", "format": "date", "example": "2025-05-20" },
                    "memberId": { "type": "integer", "example": 1 },
                    "created_at": { "type": "string", "format": "date-time" },
                    "updated_at": { "type": "string", "format": "date-time" }
                }
            },
            "PenaltyInput": {
                "type": "object",
                "properties": {
                    "type": { "type": "string", "example": "warning" },
                    "reason": { "type": "string", "example": "Atraso" },
                    "date": { "type": "string", "format": "date", "example": "2025-05-20" },
                    "memberId": { "type": "integer", "example": 1 }
                },
                "required": ["type", "reason", "memberId"]
            },
            "PenaltyUpdate": {
                "type": "object",
                "properties": {
                    "type": { "type": "string", "example": "suspension" },
                    "reason": { "type": "string", "example": "Motivo atualizado" }
                }
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    }
}
